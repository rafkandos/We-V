// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wevi.Models;

namespace wevi.Migrations
{
    [DbContext(typeof(WevDbContext))]
    [Migration("20190724213357_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("wevi.Models.Admin", b =>
                {
                    b.Property<int>("adminid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("commentid");

                    b.Property<string>("email");

                    b.Property<string>("fullname");

                    b.Property<string>("password");

                    b.HasKey("adminid");

                    b.HasIndex("commentid");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("wevi.Models.Banner", b =>
                {
                    b.Property<int>("bannerid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("image");

                    b.HasKey("bannerid");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("wevi.Models.Comment", b =>
                {
                    b.Property<int>("commentid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("comment")
                        .IsRequired();

                    b.Property<DateTime?>("commentdate")
                        .IsRequired();

                    b.Property<int>("eventid");

                    b.Property<int>("timelineid");

                    b.Property<int>("userid");

                    b.HasKey("commentid");

                    b.HasIndex("eventid");

                    b.HasIndex("timelineid");

                    b.HasIndex("userid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("wevi.Models.Event", b =>
                {
                    b.Property<int>("eventid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("bannerid");

                    b.Property<int>("countingevent");

                    b.Property<string>("detailevent");

                    b.Property<string>("eventcode");

                    b.Property<DateTime?>("eventdate");

                    b.Property<string>("eventname");

                    b.Property<string>("linkstring");

                    b.Property<string>("statusevent");

                    b.HasKey("eventid");

                    b.HasIndex("bannerid");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("wevi.Models.History", b =>
                {
                    b.Property<int>("historyid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("eventid");

                    b.Property<int>("productid");

                    b.Property<int>("userid");

                    b.HasKey("historyid");

                    b.HasIndex("eventid");

                    b.HasIndex("productid");

                    b.HasIndex("userid");

                    b.ToTable("History");
                });

            modelBuilder.Entity("wevi.Models.Numbering", b =>
                {
                    b.Property<int>("participantcode")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("userid");

                    b.HasKey("participantcode");

                    b.ToTable("Numbering");
                });

            modelBuilder.Entity("wevi.Models.Product", b =>
                {
                    b.Property<int>("productid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("bannerid");

                    b.Property<string>("productcode");

                    b.Property<string>("productdetail");

                    b.Property<string>("productname");

                    b.HasKey("productid");

                    b.HasIndex("bannerid");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("wevi.Models.Profile", b =>
                {
                    b.Property<int>("profileid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("userid");

                    b.HasKey("profileid");

                    b.HasIndex("userid");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("wevi.Models.Qr", b =>
                {
                    b.Property<int>("qrid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("eventid");

                    b.Property<int>("productid");

                    b.Property<int>("userid");

                    b.HasKey("qrid");

                    b.HasIndex("eventid");

                    b.HasIndex("productid");

                    b.HasIndex("userid");

                    b.ToTable("Qr");
                });

            modelBuilder.Entity("wevi.Models.Timeline", b =>
                {
                    b.Property<int>("timelineid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("bannerid");

                    b.Property<int>("eventid");

                    b.Property<int>("productid");

                    b.HasKey("timelineid");

                    b.HasIndex("bannerid");

                    b.HasIndex("eventid");

                    b.HasIndex("productid");

                    b.ToTable("Timeline");
                });

            modelBuilder.Entity("wevi.Models.User", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("age");

                    b.Property<DateTime?>("dateofbirth");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("fullname")
                        .HasMaxLength(200);

                    b.Property<string>("gender")
                        .HasMaxLength(20);

                    b.Property<string>("interest")
                        .HasMaxLength(100);

                    b.Property<string>("major")
                        .HasMaxLength(50);

                    b.Property<int>("modifiedon");

                    b.Property<int>("participantcode");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("phone")
                        .HasMaxLength(20);

                    b.Property<string>("school")
                        .HasMaxLength(80);

                    b.HasKey("userid");

                    b.HasIndex("participantcode");

                    b.ToTable("User");
                });

            modelBuilder.Entity("wevi.Models.Admin", b =>
                {
                    b.HasOne("wevi.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("commentid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.Comment", b =>
                {
                    b.HasOne("wevi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.Timeline", "Timeline")
                        .WithMany()
                        .HasForeignKey("timelineid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.Event", b =>
                {
                    b.HasOne("wevi.Models.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("bannerid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.History", b =>
                {
                    b.HasOne("wevi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.Product", b =>
                {
                    b.HasOne("wevi.Models.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("bannerid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.Profile", b =>
                {
                    b.HasOne("wevi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.Qr", b =>
                {
                    b.HasOne("wevi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.Timeline", b =>
                {
                    b.HasOne("wevi.Models.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("bannerid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("eventid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("wevi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wevi.Models.User", b =>
                {
                    b.HasOne("wevi.Models.Numbering", "Numbering")
                        .WithMany()
                        .HasForeignKey("participantcode")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
